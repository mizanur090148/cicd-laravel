name: CI/CD Pipeline for Laravel Deployment

on:
  push:
    branches:
      - main

jobs:
  # Continuous Integration (CI) Job
  ci:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Set up PHP environment
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3" # Use PHP version as per your application requirement
          extensions: mbstring, bcmath, pdo, mysql # Ensure all necessary PHP extensions are included
          tools: composer # Include Composer in the PHP setup

      # Step 3: Cache Composer dependencies to speed up the pipeline
      - name: Cache Composer Dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # Step 4: Install Composer dependencies
      - name: Install Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      # Step 5: Set up testing environment
      - name: Set Up Testing Environment
        run: |
          cp .env.example .env
          php artisan key:generate
          php artisan config:clear

      # Step 6: Run PHPUnit tests
      - name: Run Tests
        run: ./vendor/bin/phpunit --configuration phpunit.xml --log-junit test-report.xml

      # Step 7: Upload test results (Optional)
      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test-report.xml

  # Continuous Deployment (CD) Job
  deploy:
    runs-on: ubuntu-latest
    needs: [ci] # Ensure CI job passes before running the deployment

    env:
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_KEY: ${{ secrets.EC2_KEY }}

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Decode and save SSH private key securely
      - name: Configure SSH Key
        run: |
          echo "$EC2_KEY" > /tmp/deploy-key.pem
          chmod 600 /tmp/deploy-key.pem

      # Step 3: Add EC2 host to known_hosts to avoid SSH prompt
      - name: Add EC2 Host to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

      # Step 4: SSH to EC2 and deploy Laravel application
      - name: Deploy Laravel Application
        run: |
          ssh -i /tmp/deploy-key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            echo "Starting Laravel deployment..."

            # Set variables
            APP_DIR="/var/www/laravel"
            DEPLOY_BRANCH="main"

            # Ensure proper ownership and permissions
            echo "Adjusting permissions..."
            sudo chown -R www-data:www-data $APP_DIR
            sudo chmod -R 755 $APP_DIR

            # Navigate to application directory
            cd $APP_DIR

            # Pull latest code changes
            echo "Pulling latest code from $DEPLOY_BRANCH branch..."
            sudo git reset --hard HEAD
            sudo git pull origin $DEPLOY_BRANCH

            # Install dependencies for production
            echo "Installing production dependencies..."
            sudo composer install --no-dev --optimize-autoloader

            # Run database migrations
            echo "Running database migrations..."
            sudo php artisan migrate --force

            # Seed the database if necessary
            echo "Seeding database..."
            sudo php artisan db:seed --force

            # Cache configurations
            echo "Clearing and caching configurations..."
            sudo php artisan config:cache

            # Cache routes
            echo "Caching routes..."
            php artisan route:cache

            # Cache views
            echo "Caching views..."
            php artisan view:cache

            # Restart services (e.g., Nginx, PHP-FPM)
            echo "Restarting services..."
            sudo systemctl restart nginx
            sudo systemctl restart php8.3-fpm

            echo "Laravel deployment completed!"
            exit
          EOF
